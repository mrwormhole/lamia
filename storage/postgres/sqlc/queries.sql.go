// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, password
) VALUES (
             $1, $2
         )
RETURNING id, first_name, last_name, email, username, password, is_superuser, is_staff, is_active, created_at, updated_at, last_login_at, group_id
`

type CreateUserParams struct {
	Email    string
	Password sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsSuperuser,
		&i.IsStaff,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.GroupID,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, username, password, is_superuser, is_staff, is_active, created_at, updated_at, last_login_at, group_id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsSuperuser,
		&i.IsStaff,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.GroupID,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, email, username, password, is_superuser, is_staff, is_active, created_at, updated_at, last_login_at, group_id FROM users
ORDER BY email
`

func (q *Queries) ListUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.IsSuperuser,
			&i.IsStaff,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLoginAt,
			&i.GroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
